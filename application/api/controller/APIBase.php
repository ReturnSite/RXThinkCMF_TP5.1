<?php

namespace app\api\controller;

use app\common\controller\BaseController;
use think\Controller;
use app\api\model\User;
use think\Facade\Config;
use util\Jwt;

// 处理跨域请求的问题
header("Access-Control-Allow-Origin: *");

/**
 * API 接口基类
 * @author 牧羊人
 * @date 2019/8/29
 * Class APIBase
 * @package app\api\controller
 */
class APIBase extends BaseController
{
    // 模型
    protected $model;
    // 服务
    protected $service;
    // 验证
    protected $validate;
    // 网络请求
    protected $req;
    // 请求序列号(系统生成)
    protected $req_id;
    // 鉴权Token
    protected $token;
    // 人员ID
    protected $userId;
    // 人员信息
    protected $userInfo;

    /**
     * 初始化方法
     * @author 牧羊人
     * @date 2019/8/28
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        // 初始化请求信息
        $this->initRequestInfo();

        // 初始化网络请求配置
        $this->initRequestConfig();
    }

    /**
     * 初始化请求信息
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @author 牧羊人
     * @date 2019/8/28
     */
    private function initRequestInfo()
    {
        // 请求序列编码
        $requestId = substr(md5(time() . get_random_code(10) . rand(1, 1000)), 8, 16);
        $this->req_id = $requestId;

        // 不是登录入口全部需要Token令牌验证
        if (CONTROLLER_NAME != 'login') {
            // 网络请求参数
            $this->req = $this->request->param();

            // Token令牌(校验)
            $token = getter($this->req, 'token', '');
            if (!$token) {
                $this->jsonReturn(message(MESSAGE_NO_TOKEN, false, -2));
            }

            // JWT解密token
            $jwt = new Jwt();
            $uid = $jwt->verifyToken($token);
            if (!$uid) {
                $this->jsonReturn(MESSAGE_TOKEN_FAILED, false, '', -2);
            }

            // 根据令牌获取数据信息
            $userModel = new User();
            $userInfo = $userModel->getInfo($uid);
            if (!$userInfo) {
                $this->jsonReturn(MESSAGE_USER_NO_INFO);
            }

            // 验证用户状态
            if ($userInfo['status'] != 1) {
                $this->jsonReturn(MESSAGE_USER_FIRBIDDEN);
            }

            // 设置用户信息
            $this->userId = $userInfo['id'];
            $this->userInfo = $userInfo;
        }
    }

    /**
     * 登录验证(接口需要登录时调用此方法)
     * @author 牧羊人
     * @date 2019/5/24
     */
    protected function needLogin()
    {
        if (!$this->userId) {
            $this->jsonReturn(message(MESSAGE_NEEDLOGIN));
        }
    }

    /**
     * 初始化分页设置
     * @param int $page 页码
     * @param int $perpage 每页数
     * @param string $limit 限制条数
     * @author 牧羊人
     * @date 2019/5/24
     */
    public function initPage(&$page, &$perpage, &$limit)
    {
        $page = (int)$this->req['page'];
        $perpage = (int)$this->req['perpage'];
        $page = $page ? $page : 1;
        $perpage = $perpage ? $perpage : 10;
        $startIndex = ($page - 1) * $perpage;
        $limit = "{$startIndex}, {$perpage}";
    }

    /**
     * JSON返回结果
     * @author 牧羊人
     * @date 2019/8/28
     */
    public function jsonReturn()
    {
        false && message();

        // 获取参数
        $arr = func_get_args();

        if (!is_array($arr[0])) {
            // 回调函数
            $result = call_user_func_array("message", $arr);
        } else {
            // 函数模式
            $result = $arr[0];
        }

        // 返回结果
        $output = json_encode($result);
//        $crypt = getCryptDesObject();
//        $output = $crypt->encrypt($output);
//        //APP_DEBUG && $output = $crypt->decrypt($output);
//        $output = $crypt->decrypt($output);
        echo $output;
        exit();
    }
}
